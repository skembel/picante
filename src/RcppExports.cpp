// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distmat_rcpp
arma::mat distmat_rcpp(arma::mat comm, arma::mat dis, int threads);
RcppExport SEXP _picante_distmat_rcpp(SEXP commSEXP, SEXP disSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type comm(commSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dis(disSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmat_rcpp(comm, dis, threads));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void frequency(void *, void *, void *);
RcppExport void independentswap(void *, void *, void *, void *);
RcppExport void richness(void *, void *, void *);
RcppExport void trialswap(void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_picante_distmat_rcpp", (DL_FUNC) &_picante_distmat_rcpp, 3},
    {"frequency",       (DL_FUNC) &frequency,       3},
    {"independentswap", (DL_FUNC) &independentswap, 4},
    {"richness",        (DL_FUNC) &richness,        3},
    {"trialswap",       (DL_FUNC) &trialswap,       4},
    {NULL, NULL, 0}
};

RcppExport void R_init_picante(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
